using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TextBox;

namespace WikiApp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        static int ROW = 12; //maximum no of data 
        static int COL = 4; // name , category ,structure , definitions
        int ptr = 0;
        string[,] TwoDimAry = new string[ROW, COL];

        private object columnHeader1Name;
        private object textBoxstructure;
        private void ButtonAdd_Click(object sender, EventArgs e)
        {


            // Capitalise input value
            //  string name = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(textBoxName.Text.ToLower());
            //  string category = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(textBoxCategory.Text.ToLower());
            //  string structure = textBoxStructure.Text;
            //  string definition = textBoxDefn.Text;

            AddArray();
            Clear_TextBoxes();
            Sort();

            // Display the sorted array in the ListView
            listView1.Items.Clear(); // Clear existing items
            for (int i = 0; i < ptr; i++)
            {
                ListViewItem item = new ListViewItem(TwoDimAry[i, 0]); // Name
                item.SubItems.Add(TwoDimAry[i, 1]); // Category
                listView1.Items.Add(item);
            }
        }

        private void AddArray()
        {
            if (ptr < ROW)
            {
                try
                {
                    TwoDimAry[ptr, 0] = textBoxName.Text;
                    TwoDimAry[ptr, 1] = textBoxCategory.Text;
                    TwoDimAry[ptr, 2] = textBoxStructure.Text;
                    TwoDimAry[ptr, 3] = textBoxDefn.Text;

                    ptr++;
                }
                catch
                {
                    MessageBox.Show("An error occurred.");
                }
            }
            else
            {
                MessageBox.Show("Array is full!");
            }
        }




        // Bubble Sort method to sort by Title
        private void Sort()
        {
            for (int x = 1; x < ROW; x++)
            {
                for (int i = 0; i < ROW - 1; i++)
                {
                    if (!(string.IsNullOrEmpty(TwoDimAry[i + 1, 0])))
                    {
                        if (string.Compare(TwoDimAry[i, 0], TwoDimAry[i + 1, 0]) == 1)
                        {
                            Swap(i);
                        }
                    }
                }
            }
        }
        // Swap Routine
        private void Swap(int indx)
        {
            string temp;
            for (int i = 0; i < COL; i++)
            {
                temp = TwoDimAry[indx, i];
                TwoDimAry[indx, i] = TwoDimAry[indx + 1, i];
                TwoDimAry[indx + 1, i] = temp;
            }
        }



        private void ListView1_SelectedIndexChanged(object sender, EventArgs e)
        {
            int[] ROW = { /* Your array values here */ };
            for (int j = 0; j < ROW.Length; j++)
            {
                for (int k = j + 1; k < ROW.Length; k++)
                {
                    if (ROW[j] > ROW[k])
                    {
                        int temp = ROW[j];
                        ROW[j] = ROW[k];
                        ROW[k] = temp;
                    }
                }
            }
            // Display the sorted array in the ListView.
            for (int i = 0; i < ROW.Length; i++)
            {
                // Convert the integer to a string and capitalize the first letter.
                string itemText = ROW[i].ToString();
                itemText = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(itemText);

                ListViewItem item = new ListViewItem(ROW[i].ToString());
                listView1.Items.Add(item);
            }


            {
                ListViewItem listItem = new ListViewItem();
                listView1.Items.Add(listItem);
                listView1.Sort();

                for (int i = 0; i < ROW.Length; i++)
                {
                    Console.Write(ROW[i] + ", ");
                }
                // Pause the program so the output can be viewed.
                Console.ReadLine();
            }
        }



        private void buttonClear_Click(object sender, EventArgs e)
        {
            Clear_TextBoxes();
        }
        private void Clear_TextBoxes()
        {
            textBoxName.Clear();
            textBoxCategory.Clear();
            textBoxStructure.Clear();
            textBoxDefn.Clear();
        }

        private void buttonEdit_Click(object sender, EventArgs e)
        {

            // Check if an item is selected in the ListView
            if (listView1.SelectedItems.Count > 0)
            {
                // Get the selected item
                ListViewItem selectedItem = listView1.SelectedItems[0];

                // Check if the selected item has enough subitems
                if (selectedItem.SubItems.Count >= 4) // Assuming you have 4 subitems (0-based indexing)
                {
                    // Update the selected item with new values from text boxes
                    selectedItem.SubItems[0].Text = textBoxName.Text;
                    selectedItem.SubItems[1].Text = textBoxCategory.Text;
                    selectedItem.SubItems[2].Text = textBoxStructure.Text;
                    selectedItem.SubItems[3].Text = textBoxDefn.Text;

                    // Clear the text boxes and disable editing
                    textBoxName.Text = "";
                    textBoxCategory.Text = "";
                    textBoxStructure.Text = "";
                    textBoxDefn.Text = "";
                    textBoxName.Enabled = false;
                    textBoxCategory.Enabled = false;
                    textBoxStructure.Enabled = false;
                    textBoxDefn.Enabled = false;
                }

                else
                {
                    MessageBox.Show("Please select an item to edit.");
                }


                //    try
                //  {
                //     listView1.SelectedItems[0].SubItems[0].Text = textBoxName.Text;
                //      listView1.SelectedItems[0].SubItems[1].Text = textBoxCategory.Text;

                //  }
                //   catch { }


            }
        }
        private void buttonDelete_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("Are you sure you want to delete this entry?",
                "Confirmation",
                MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (result == DialogResult.Yes)
            {
                // Check if there is a selected item
                if (listView1.SelectedItems.Count > 0)
                {
                    // Remove the selected item from the ListView
                    listView1.Items.RemoveAt(listView1.SelectedIndices[0]);
                }

            }
        }


        private void buttonSave_Click(object sender, EventArgs e)
        {
            Sort();
            // Allow the user to select the destination file
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Binary Files (*.dat)|*.dat|All Files (*.*)|*.*";
            saveFileDialog.Title = "Save Definitions File";
            saveFileDialog.FileName = "definitions.dat";

            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                // Write the sorted data into the selected binary file
                try
                {
                    using (BinaryWriter writer = new BinaryWriter(new FileStream(saveFileDialog.FileName, FileMode.Create)))
                    {
                        for (int i = 0; i < ptr; i++)
                        {
                            writer.Write(TwoDimAry[i, 0]); // Name
                            writer.Write(TwoDimAry[i, 1]); // Category
                            writer.Write(TwoDimAry[i, 2]); // Structure
                            writer.Write(TwoDimAry[i, 3]); // Definition
                        }
                    }

                    MessageBox.Show("Data saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error saving data: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        //Binary Search
        private void buttonSearch_Click(object sender, EventArgs e)

        {
            // Ensure the search text is not empty
            if (string.IsNullOrEmpty(textBox1.Text))
            {
                MessageBox.Show("Please enter a search term.");
                return;
            }

            // Convert the first column of TwoDimAry to a list for binary search
            List<string> list = new List<string>();
            for (int i = 0; i < TwoDimAry.GetLength(0); i++)
            {
                list.Add(TwoDimAry[i, 0]); // Assuming the search is based on the first column
            }

            // Perform binary search
            string findThis = textBox1.Text;
            int first = 0;
            int last = listView1.Items.Count - 1;
            bool isFound = false;

            while (first <= last)
            {
                int mid = (first + last) / 2;
                if (findThis.CompareTo(list[mid]) == 0)
                {
                    isFound = true;
                    break;
                }
                else if (findThis.CompareTo(list[mid]) < 0)
                {
                    last = mid - 1;
                }
                else
                {
                    first = mid + 1;
                }
            }

            if (isFound)
            {
                MessageBox.Show($"Found at element [{list.IndexOf(findThis)}]");
            }
            else
            {
                MessageBox.Show("NOT found");
                textBox1.Text = "";
                textBox1.Focus();
            }
        }
        // open

        private void button1_Click(object sender, EventArgs e)
        {
            {
                BinaryReader br;
                int x = 0;
                listView1.Items.Clear();

                try
                {
                    br = new BinaryReader(new FileStream("definitions.dat", FileMode.Open));
                }
                catch (Exception fe)
                {
                    MessageBox.Show(fe.Message + "\n Cannot open file for reading");
                    return;
                }

                while (br.BaseStream.Position != br.BaseStream.Length)
                {
                    try
                    {
                        for (int i = 0; i < ptr; i++)
                        {
                            TwoDimAry[x, 0] = br.ReadString();
                            TwoDimAry[x, 1] = br.ReadString();
                            TwoDimAry[x, 2] = br.ReadString();
                            TwoDimAry[x, 3] = br.ReadString();
                            x++;
                        }
                        // Read data for each definition
                        //string name = br.ReadString();
                        //string category = br.ReadString();
                        //string structure = br.ReadString();
                        //string definition = br.ReadString();

                        // Add the data to the ListView
                        //ListViewItem item = new ListViewItem(name);
                        //item.SubItems.Add(category);


                        //listView1.Items.Add(item);


                    }
                    catch (Exception fe)
                    {
                        MessageBox.Show("Cannot read data from file or EOF" + fe);
                        break;
                    }
                    ptr = x;
                    DisplayListView();
                }

                br.Close();


            }
        }
        private void DisplayListView()
        {
            listView1.Items.Clear();
            string rec = "";
            for (int x = 0; x < ROW; x++)
            {
                rec = TwoDimAry[x, 0] + "\t" + TwoDimAry[x, 3];
                listView1.Items.Add(rec);
            }
        }
        // Display current new game
        //private void DisplayOneArray(int x)
        //{
        //    Clear_TextBoxes();
        //    TextBoxes.Text = TwoDimAry[x, 0] + ". "
        //            + TwoDimAry[x, 1] + ", "
        //            + TwoDimAry[x, 2] + " - "
        //            + TwoDimAry[x, 3];
        //}

        private void listView1_Click(object sender, EventArgs e)
        {
            //    try
            //    {
            //        listView1.SetSelected(listView1.SelectedIndex, true);
            //        DisplayOneGame(listView1.SelectedIndex);
            //    }
            //    catch
            //    {
            //        return;
            //    }
            //}
            if (listView1.SelectedItems.Count > 0)
            {
                ListViewItem selectedItem = listView1.SelectedItems[0];

                // Check if the selected item has at least four subitems
                if (selectedItem.SubItems.Count >= 4)
                {
                    // Access the text of each subitem
                    textBoxName.Text = selectedItem.SubItems[0].Text;
                    textBoxCategory.Text = selectedItem.SubItems[1].Text;
                    textBoxStructure.Text = selectedItem.SubItems[2].Text;
                    textBoxDefn.Text = selectedItem.SubItems[3].Text;
                }
                else
                {
                    // Handle the case where the selected item doesn't have enough subitems
                    MessageBox.Show("Selected item doesn't have enough subitems.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
    }
}
